{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE CApiFFI #-}
{-# LANGUAGE RecordWildCards #-}
-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.Win32.Window
-- Copyright   :  (c) Alastair Reid, 1997-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
--
-- Maintainer  :  Esa Ilari Vuokko <ei@vuokko.info>
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of FFI declarations for interfacing with Win32.
--
-----------------------------------------------------------------------------

module Graphics.Win32.Toolbar (
  tOOLBARCLASSNAME
, iS_INTRESOURCE
, HIMAGELIST(..)
, sizeTBBUTTON

, iDB_STD_LARGE_COLOR
, iDB_STD_SMALL_COLOR
, iDB_VIEW_LARGE_COLOR
, iDB_VIEW_SMALL_COLOR
, iDB_HIST_NORMAL
, iDB_HIST_HOT
, iDB_HIST_DISABLED
, iDB_HIST_PRESSED 

, sTD_CUT
, sTD_COPY
, sTD_PASTE
, sTD_UNDO
, sTD_REDOW
, sTD_DELETE
, sTD_FILENEW
, sTD_FILEOPEN
, sTD_FILESAVE
, sTD_PRINTPRE
, sTD_PROPERTIES
, sTD_HELP
, sTD_FIND
, sTD_REPLACE
, sTD_PRINT

, vIEW_LARGEICONS
, vIEW_SMALLICONS
, vIEW_LIST
, vIEW_DETAILS
, vIEW_SORTNAME
, vIEW_SORTSIZE
, vIEW_SORTDATE
, vIEW_SORTTYPE
, vIEW_PARENTFOLDER
, vIEW_NETCONNECT
, vIEW_NETDISCONNECT
, vIEW_NEWFOLDER
, vIEW_VIEWMENU
, hIST_BACK
, hIST_FORWARD
, hIST_FAVORITES
, hIST_ADDTOFAVORITES
, hIST_VIEWTREE

, StandardImageList(..)
, StandardImageType


, iLC_MASK
, iLC_COLOR
, iLC_COLORDDB
, iLC_COLOR4
, iLC_COLOR8
, iLC_COLOR16
, iLC_COLOR24
, iLC_COLOR32
, iLC_PALETTE
, iLC_MIRROR
, iLC_PERITEMMIRROR
, imageList_Create
, imageList_Destroy
, imageList_Add

, ToolbarButtonStyle
, ToolbarButtonState

, ToolbarStyle(..)

, bTNS_AUTOSIZE
, bTNS_BUTTON
, bTNS_CHECK
, bTNS_CHECKGROUP
, bTNS_DROPDOWN
, bTNS_GROUP
, bTNS_NOPREFIX
, bTNS_SEP
, bTNS_SHOWTEXT
, bTNS_WHOLEDROPDOWN

, cMB_MASKED
, tBSTATE_CHECKED
, tBSTATE_PRESSED
, tBSTATE_ENABLED
, tBSTATE_HIDDEN
, tBSTATE_INDETERMINATE
, tBSTATE_WRAP
, tBSTATE_ELLIPSES
, tBSTATE_MARKED


, tBSTYLE_BUTTON
, tBSTYLE_SEP
, tBSTYLE_CHECK
, tBSTYLE_GROUP
, tBSTYLE_CHECKGROUP
, tBSTYLE_DROPDOWN
, tBSTYLE_AUTOSIZE
, tBSTYLE_NOPREFIX
, tBSTYLE_TOOLTIPS
, tBSTYLE_WRAPABLE
, tBSTYLE_ALTDRAG
, tBSTYLE_FLAT
, tBSTYLE_LIST
, tBSTYLE_CUSTOMERASE
, tBSTYLE_REGISTERDROP
, tBSTYLE_TRANSPARENT
, tBSTYLE_EX_DRAWDDARROWS
, tB_ADDBITMAP
, tB_ADDBUTTONS
, tB_ADDSTRING
, tB_AUTOSIZE
, tB_BUTTONCOUNT
, tB_BUTTONSTRUCTSIZE
, tB_CHANGEBITMAP
, tB_CHECKBUTTON
, tB_COMMANDTOINDEX
, tB_CUSTOMIZE
, tB_DELETEBUTTON
, tB_ENABLEBUTTON
, tB_GETANCHORHIGHLIGHT
, tB_GETBITMAP
, tB_GETBITMAPFLAGS
, tB_GETBUTTON
, tB_GETBUTTONINFO
, tB_GETBUTTONSIZE
, tB_GETBUTTONTEXT
, tB_GETCOLORSCHEME
, tB_GETDISABLEDIMAGELIST
, tB_GETEXTENDEDSTYLE
, tB_GETHOTIMAGELIST
, tB_GETHOTITEM
, tB_GETIDEALSIZE
, tB_GETIMAGELIST
, tB_GETIMAGELISTCOUNT
, tB_GETINSERTMARK
, tB_GETINSERTMARKCOLOR
, tB_GETITEMDROPDOWNRECT
, tB_GETITEMRECT
, tB_GETMAXSIZE
, tB_GETMETRICS
, tB_GETOBJECT
, tB_GETPADDING
, tB_GETPRESSEDIMAGELIST
, tB_GETRECT
, tB_GETROWS
, tB_GETSTATE
, tB_GETSTRING
, tB_GETSTYLE
, tB_GETTEXTROWS
, tB_GETTOOLTIPS
, tB_GETUNICODEFORMAT
, tB_HASACCELERATOR
, tB_HIDEBUTTON
, tB_HITTEST
, tB_INDETERMINATE
, tB_INSERTBUTTON
, tB_INSERTMARKHITTEST
, tB_ISBUTTONCHECKED
, tB_ISBUTTONENABLED
, tB_ISBUTTONHIDDEN
, tB_ISBUTTONHIGHLIGHTED
, tB_ISBUTTONINDETERMINATE
, tB_ISBUTTONPRESSED
, tB_LOADIMAGES
, tB_MAPACCELERATOR
, tB_MARKBUTTON
, tB_MOVEBUTTON
, tB_PRESSBUTTON
, tB_REPLACEBITMAP
, tB_SAVERESTORE
, tB_SETANCHORHIGHLIGHT
, tB_SETBITMAPSIZE
, tB_SETBOUNDINGSIZE
, tB_SETBUTTONINFO
, tB_SETBUTTONSIZE
, tB_SETBUTTONWIDTH
, tB_SETCMDID
, tB_SETCOLORSCHEME
, tB_SETDISABLEDIMAGELIST
, tB_SETDRAWTEXTFLAGS
, tB_SETEXTENDEDSTYLE
, tB_SETHOTIMAGELIST
, tB_SETHOTITEM
, tB_SETHOTITEM2
, tB_SETIMAGELIST
, tB_SETINDENT
, tB_SETINSERTMARK
, tB_SETINSERTMARKCOLOR
, tB_SETLISTGAP
, tB_SETMAXTEXTROWS
, tB_SETMETRICS
, tB_SETPADDING
, tB_SETPARENT
, tB_SETPRESSEDIMAGELIST
, tB_SETROWS
, tB_SETSTATE
, tB_SETSTYLE
, tB_SETTOOLTIPS
, sendTB_ADDBUTTONS
, i_IMAGECALLBACK
, TBBUTTON(..)
, TBADDBITMAP(..)
, hINST_COMMCTRL
) where

import Foreign
import Data.Function
import System.Win32
import Graphics.Win32

##include "windows_cconv.h"

#include <windows.h>
#include <commctrl.h>

tOOLBARCLASSNAME :: ClassName
tOOLBARCLASSNAME = mkClassName "ToolbarWindow32"

#{enum HINSTANCE, intPtrToPtr
, hINST_COMMCTRL = HINST_COMMCTRL
}

#{enum WindowMessage,
, tB_ADDBITMAP = TB_ADDBITMAP
, tB_ADDBUTTONS = TB_ADDBUTTONSW
, tB_ADDSTRING = TB_ADDSTRING
, tB_AUTOSIZE = TB_AUTOSIZE
, tB_BUTTONCOUNT = TB_BUTTONCOUNT
, tB_BUTTONSTRUCTSIZE = TB_BUTTONSTRUCTSIZE
, tB_CHANGEBITMAP = TB_CHANGEBITMAP
, tB_CHECKBUTTON = TB_CHECKBUTTON
, tB_COMMANDTOINDEX = TB_COMMANDTOINDEX
, tB_CUSTOMIZE = TB_CUSTOMIZE
, tB_DELETEBUTTON = TB_DELETEBUTTON
, tB_ENABLEBUTTON = TB_ENABLEBUTTON
, tB_GETANCHORHIGHLIGHT = TB_GETANCHORHIGHLIGHT
, tB_GETBITMAP = TB_GETBITMAP
, tB_GETBITMAPFLAGS = TB_GETBITMAPFLAGS
, tB_GETBUTTON = TB_GETBUTTON
, tB_GETBUTTONINFO = TB_GETBUTTONINFO
, tB_GETBUTTONSIZE = TB_GETBUTTONSIZE
, tB_GETBUTTONTEXT = TB_GETBUTTONTEXT
, tB_GETCOLORSCHEME = TB_GETCOLORSCHEME
, tB_GETDISABLEDIMAGELIST = TB_GETDISABLEDIMAGELIST
, tB_GETEXTENDEDSTYLE = TB_GETEXTENDEDSTYLE
, tB_GETHOTIMAGELIST = TB_GETHOTIMAGELIST
, tB_GETHOTITEM = TB_GETHOTITEM
, tB_GETIDEALSIZE = TB_GETIDEALSIZE
, tB_GETIMAGELIST = TB_GETIMAGELIST
, tB_GETIMAGELISTCOUNT = TB_GETIMAGELISTCOUNT
, tB_GETINSERTMARK = TB_GETINSERTMARK
, tB_GETINSERTMARKCOLOR = TB_GETINSERTMARKCOLOR
, tB_GETITEMDROPDOWNRECT = TB_GETITEMDROPDOWNRECT
, tB_GETITEMRECT = TB_GETITEMRECT
, tB_GETMAXSIZE = TB_GETMAXSIZE
, tB_GETMETRICS = TB_GETMETRICS
, tB_GETOBJECT = TB_GETOBJECT
, tB_GETPADDING = TB_GETPADDING
, tB_GETPRESSEDIMAGELIST = TB_GETPRESSEDIMAGELIST
, tB_GETRECT = TB_GETRECT
, tB_GETROWS = TB_GETROWS
, tB_GETSTATE = TB_GETSTATE
, tB_GETSTRING = TB_GETSTRING
, tB_GETSTYLE = TB_GETSTYLE
, tB_GETTEXTROWS = TB_GETTEXTROWS
, tB_GETTOOLTIPS = TB_GETTOOLTIPS
, tB_GETUNICODEFORMAT = TB_GETUNICODEFORMAT
, tB_HASACCELERATOR = TB_HASACCELERATOR
, tB_HIDEBUTTON = TB_HIDEBUTTON
, tB_HITTEST = TB_HITTEST
, tB_INDETERMINATE = TB_INDETERMINATE
, tB_INSERTBUTTON = TB_INSERTBUTTON
, tB_INSERTMARKHITTEST = TB_INSERTMARKHITTEST
, tB_ISBUTTONCHECKED = TB_ISBUTTONCHECKED
, tB_ISBUTTONENABLED = TB_ISBUTTONENABLED
, tB_ISBUTTONHIDDEN = TB_ISBUTTONHIDDEN
, tB_ISBUTTONHIGHLIGHTED = TB_ISBUTTONHIGHLIGHTED
, tB_ISBUTTONINDETERMINATE = TB_ISBUTTONINDETERMINATE
, tB_ISBUTTONPRESSED = TB_ISBUTTONPRESSED
, tB_LOADIMAGES = TB_LOADIMAGES
, tB_MAPACCELERATOR = TB_MAPACCELERATOR
, tB_MARKBUTTON = TB_MARKBUTTON
, tB_MOVEBUTTON = TB_MOVEBUTTON
, tB_PRESSBUTTON = TB_PRESSBUTTON
, tB_REPLACEBITMAP = TB_REPLACEBITMAP
, tB_SAVERESTORE = TB_SAVERESTORE
, tB_SETANCHORHIGHLIGHT = TB_SETANCHORHIGHLIGHT
, tB_SETBITMAPSIZE = TB_SETBITMAPSIZE
, tB_SETBOUNDINGSIZE = TB_SETBOUNDINGSIZE
, tB_SETBUTTONINFO = TB_SETBUTTONINFO
, tB_SETBUTTONSIZE = TB_SETBUTTONSIZE
, tB_SETBUTTONWIDTH = TB_SETBUTTONWIDTH
, tB_SETCMDID = TB_SETCMDID
, tB_SETCOLORSCHEME = TB_SETCOLORSCHEME
, tB_SETDISABLEDIMAGELIST = TB_SETDISABLEDIMAGELIST
, tB_SETDRAWTEXTFLAGS = TB_SETDRAWTEXTFLAGS
, tB_SETEXTENDEDSTYLE = TB_SETEXTENDEDSTYLE
, tB_SETHOTIMAGELIST = TB_SETHOTIMAGELIST
, tB_SETHOTITEM = TB_SETHOTITEM
, tB_SETHOTITEM2 = TB_SETHOTITEM2
, tB_SETIMAGELIST = TB_SETIMAGELIST
, tB_SETINDENT = TB_SETINDENT
, tB_SETINSERTMARK = TB_SETINSERTMARK
, tB_SETINSERTMARKCOLOR = TB_SETINSERTMARKCOLOR
, tB_SETLISTGAP = TB_SETLISTGAP
, tB_SETMAXTEXTROWS = TB_SETMAXTEXTROWS
, tB_SETMETRICS = TB_SETMETRICS
, tB_SETPADDING = TB_SETPADDING
, tB_SETPARENT = TB_SETPARENT
, tB_SETPRESSEDIMAGELIST = TB_SETPRESSEDIMAGELIST
, tB_SETROWS = TB_SETROWS
, tB_SETSTATE = TB_SETSTATE
, tB_SETSTYLE = TB_SETSTYLE
, tB_SETTOOLTIPS = TB_SETTOOLTIPS
}

newtype StandardImageList = StandardImageList { unStandardImageList :: UINT_PTR }
  deriving (Num, Eq, Show, Ord)

type StandardImageType = Word16

#{enum StandardImageList, StandardImageList
, iDB_STD_LARGE_COLOR = IDB_STD_LARGE_COLOR
, iDB_STD_SMALL_COLOR = IDB_STD_SMALL_COLOR
, iDB_VIEW_LARGE_COLOR = IDB_VIEW_LARGE_COLOR
, iDB_VIEW_SMALL_COLOR = IDB_VIEW_SMALL_COLOR
, iDB_HIST_NORMAL = 12
, iDB_HIST_HOT = 13
, iDB_HIST_DISABLED = 14
, iDB_HIST_PRESSED = 15
}

#{enum StandardImageType,
, sTD_CUT = STD_CUT
, sTD_COPY = STD_COPY
, sTD_PASTE = STD_PASTE
, sTD_UNDO = STD_UNDO
, sTD_REDOW = STD_REDOW
, sTD_DELETE = STD_DELETE
, sTD_FILENEW = STD_FILENEW
, sTD_FILEOPEN = STD_FILEOPEN
, sTD_FILESAVE = STD_FILESAVE
, sTD_PRINTPRE = STD_PRINTPRE
, sTD_PROPERTIES = STD_PROPERTIES
, sTD_HELP = STD_HELP
, sTD_FIND = STD_FIND
, sTD_REPLACE = STD_REPLACE
, sTD_PRINT = STD_PRINT

, vIEW_LARGEICONS = VIEW_LARGEICONS
, vIEW_SMALLICONS = VIEW_SMALLICONS
, vIEW_LIST = VIEW_LIST
, vIEW_DETAILS = VIEW_DETAILS
, vIEW_SORTNAME = VIEW_SORTNAME
, vIEW_SORTSIZE = VIEW_SORTSIZE
, vIEW_SORTDATE = VIEW_SORTDATE
, vIEW_SORTTYPE = VIEW_SORTTYPE
, vIEW_PARENTFOLDER = VIEW_PARENTFOLDER
, vIEW_NETCONNECT = VIEW_NETCONNECT
, vIEW_NETDISCONNECT = VIEW_NETDISCONNECT
, vIEW_NEWFOLDER = VIEW_NEWFOLDER
, vIEW_VIEWMENU = VIEW_VIEWMENU
, hIST_BACK = 0
, hIST_FORWARD = 1
, hIST_FAVORITES = 2
, hIST_ADDTOFAVORITES = 3
, hIST_VIEWTREE = 4
}


newtype ToolbarStyle = ToolbarStyle { untbStyle :: WindowStyle }
  deriving (Num, Eq, Bits)

#{enum ToolbarStyle, ToolbarStyle
, cMB_MASKED = CMB_MASKED 

, tBSTYLE_BUTTON = TBSTYLE_BUTTON 
, tBSTYLE_SEP = TBSTYLE_SEP 
, tBSTYLE_CHECK = TBSTYLE_CHECK 
, tBSTYLE_GROUP = TBSTYLE_GROUP 
, tBSTYLE_CHECKGROUP = TBSTYLE_CHECKGROUP 
, tBSTYLE_DROPDOWN = TBSTYLE_DROPDOWN 
, tBSTYLE_AUTOSIZE = TBSTYLE_AUTOSIZE 
, tBSTYLE_NOPREFIX = TBSTYLE_NOPREFIX 
, tBSTYLE_TOOLTIPS = TBSTYLE_TOOLTIPS 
, tBSTYLE_WRAPABLE = TBSTYLE_WRAPABLE 
, tBSTYLE_ALTDRAG = TBSTYLE_ALTDRAG 
, tBSTYLE_FLAT = TBSTYLE_FLAT 
, tBSTYLE_LIST = TBSTYLE_LIST 
, tBSTYLE_CUSTOMERASE = TBSTYLE_CUSTOMERASE 
, tBSTYLE_REGISTERDROP = TBSTYLE_REGISTERDROP 
, tBSTYLE_TRANSPARENT = TBSTYLE_TRANSPARENT 
, tBSTYLE_EX_DRAWDDARROWS = TBSTYLE_EX_DRAWDDARROWS 
}

data TBADDBITMAP = TBADDBITMAP
  { tbHInst :: HINSTANCE
  , tbNID :: UINT_PTR 
  }

instance Storable TBADDBITMAP where
  sizeOf _ = #{size TBADDBITMAP}
  alignment _ = #{alignment TBADDBITMAP}
  peek p = do
    tbHInst <- #{peek TBADDBITMAP,hInst} p
    tbNID <- #{peek TBADDBITMAP,nID} p
    return TBADDBITMAP{..}
  poke p TBADDBITMAP{..} = do
    #{poke TBADDBITMAP,hInst} p tbHInst
    #{poke TBADDBITMAP,nID} p tbNID


sizeTBBUTTON :: WPARAM
sizeTBBUTTON = #{size TBBUTTON}

withTStrings :: [Either LPCTSTR String] -> ([LPCTSTR] -> IO a) -> IO a
withTStrings = go []
 where
   go ptrs [] act = reverse ptrs & act
   go ptrs (Left a:aa) act = go (a:ptrs) aa act
   go ptrs (Right a:aa) act = withTString a $ \ptr -> go (ptr:ptrs) aa act

-- | If the 'tbString' parameter to TBBUTTON is Left ix, ix :: INT will be the zero based
-- index of the button string (according to a string list produced e.g. with TB_ADDSTRING).
-- If it is Right str, str :: String, it will be converted to a LPCTSTR and passed to the
-- control which uses it as the button text.
sendTB_ADDBUTTONS :: HWND -> [TBBUTTON (Either INT String)] -> IO LPARAM
sendTB_ADDBUTTONS hwnd buttons = do
  withTStrings (mapLeft (intPtrToPtr . fromIntegral) . tbString <$> buttons) $ \strs -> do
    let buttons2 :: [TBBUTTON LPCTSTR]
        buttons2 = zipWith (\a b -> a { tbString = b }) buttons strs
    withArrayLen buttons2 $ \len paButtons -> 
      sendMessage hwnd tB_ADDBUTTONS (fromIntegral len) (fromIntegral $ ptrToIntPtr paButtons)
  where 
     mapLeft f (Left x) = Left (f x)
     mapLeft _ (Right x) = Right x

data TBBUTTON a = TBBUTTON 
  { tbBitmap :: Maybe INT {-^ bitmap id, i_IMAGECALLBACK, Nothing or separator width -}
  , tbCommand :: Int {-^ found in WM_COMMAND on the toolbar's parent -}
  , tbState :: ToolbarButtonState
  , tbStyle :: ToolbarButtonStyle
  , tbData :: DWORD_PTR 
  , tbString :: a {-^ Zero-based index of the button string (in a string list) or a LPCTSTR that contains the string text -}
  }

instance Storable (TBBUTTON LPCTSTR) where
  sizeOf _ = #{size TBBUTTON} 
  alignment _ = #{alignment TBBUTTON}
  peek p = do
    tbBitmap_ <- #{peek TBBUTTON,iBitmap} p
    let tbBitmap | tbBitmap_ == i_IMAGENONE = Nothing
                 | otherwise = Just tbBitmap_
    tbCommand <- #{peek TBBUTTON,idCommand} p
    tbState <- #{peek TBBUTTON,fsState} p
    tbStyle <- #{peek TBBUTTON,fsStyle} p
    tbData <- #{peek TBBUTTON,dwData} p
    tbString <- #{peek TBBUTTON,iString} p
    return TBBUTTON{..}
  poke p TBBUTTON{..} = do
    #{poke TBBUTTON,iBitmap} p (maybe i_IMAGENONE id tbBitmap)
    #{poke TBBUTTON,idCommand} p tbCommand
    #{poke TBBUTTON,fsState} p tbState
    #{poke TBBUTTON,fsStyle} p tbStyle
    #{poke TBBUTTON,dwData} p tbData 
    #{poke TBBUTTON,iString} p tbString

newtype HIMAGELIST = HIMAGELIST { unHIMAGELIST :: HANDLE }
  deriving (Show)
newtype ImageListCreationFlags = ImageListCreationFlags UINT
  deriving (Num, Eq, Bits)
#{enum ImageListCreationFlags,ImageListCreationFlags
,iLC_MASK = ILC_MASK
,iLC_COLOR = ILC_COLOR
,iLC_COLORDDB = ILC_COLORDDB
,iLC_COLOR4 = ILC_COLOR4
,iLC_COLOR8 = ILC_COLOR8
,iLC_COLOR16 = ILC_COLOR16
,iLC_COLOR24 = ILC_COLOR24
,iLC_COLOR32 = ILC_COLOR32
,iLC_PALETTE = ILC_PALETTE
,iLC_MIRROR = ILC_MIRROR
,iLC_PERITEMMIRROR = ILC_PERITEMMIRROR
}


foreign import ccall "ImageList_Create" imageList_Create
  :: INT -> INT -> ImageListCreationFlags -> INT -> INT -> IO HIMAGELIST
foreign import ccall "ImageList_Destroy" imageList_Destroy
  :: HIMAGELIST 
  -> IO BOOL
foreign import ccall "ImageList_Add" c_ImageList_Add
  :: HIMAGELIST -- ^ the image list to which we are adding
  -> HBITMAP  -- ^ the button image
  -> HBITMAP  -- ^ the image mask
  -> IO DWORD

imageList_Add :: HIMAGELIST -> HBITMAP -> Maybe HBITMAP -> IO WORD
imageList_Add himagelist hbitmap hbitmapMask = fromIntegral <$> c_ImageList_Add himagelist hbitmap (maybePtr hbitmapMask)

-- this is translated from the mingw winuser.h , 
-- winuser.h:117:#define IS_INTRESOURCE(_r) ((((ULONG_PTR)(_r)) >> 16)==0)
iS_INTRESOURCE :: Ptr a -> Bool
iS_INTRESOURCE ptr = 0 == ulong_ptr `shiftR` 16
   where ulong_ptr = fromIntegral (ptrToIntPtr ptr) :: ULONG_PTR
          
newtype ToolbarButtonStyle = ToolbarButtonStyle BYTE
 deriving (Num, Storable, Show, Bits, Eq)
newtype ToolbarButtonState = ToolbarButtonState BYTE
 deriving (Num, Storable, Show, Bits, Eq)

#{enum ToolbarButtonStyle,ToolbarButtonStyle
,bTNS_AUTOSIZE = BTNS_AUTOSIZE
,bTNS_BUTTON = BTNS_BUTTON
,bTNS_CHECK = BTNS_CHECK
,bTNS_CHECKGROUP = BTNS_CHECKGROUP
,bTNS_DROPDOWN = BTNS_DROPDOWN
,bTNS_GROUP = BTNS_GROUP
,bTNS_NOPREFIX = BTNS_NOPREFIX
,bTNS_SEP = BTNS_SEP
,bTNS_SHOWTEXT = BTNS_SHOWTEXT
,bTNS_WHOLEDROPDOWN = BTNS_WHOLEDROPDOWN
}

#{enum ToolbarButtonState,ToolbarButtonState
, tBSTATE_CHECKED = TBSTATE_CHECKED
, tBSTATE_PRESSED = TBSTATE_PRESSED
, tBSTATE_ENABLED = TBSTATE_ENABLED
, tBSTATE_HIDDEN = TBSTATE_HIDDEN
, tBSTATE_INDETERMINATE = TBSTATE_INDETERMINATE
, tBSTATE_WRAP = TBSTATE_WRAP
, tBSTATE_ELLIPSES = TBSTATE_ELLIPSES
, tBSTATE_MARKED = TBSTATE_MARKED
}


#{enum INT,
, i_IMAGECALLBACK = I_IMAGECALLBACK
, i_IMAGENONE = I_IMAGENONE
}


